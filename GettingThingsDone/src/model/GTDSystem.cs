//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GettingThingsDone.src.model;
using GettingThingsDone.src.model.visitor;

/// <remarks>Cette classe décrit le système général de GTD, avec la boite de reception et les listes de l'utilisateur. On ajoutera surement le calendrier ici.</remarks>
public class GTDSystem : IGTDSystem
{

    public string Name { get; set; }
    private StaticList inbox = new StaticList("Inbox");
    
    public virtual StaticList Inbox
	{
        get { return inbox; }
	}

    /*private TaskList today = new StaticList("Today");
    public TaskList Today { get { return today; } }

    private TaskList tomorrow = new StaticList("Tomorrow");
    public TaskList Tomorrow { get { return tomorrow; } }

    private TaskList someday = new StaticList("Someday");
    public TaskList Someday { get { return someday; } }

    private TaskList waiting = new StaticList("Waiting");
    public TaskList Waiting { get { return waiting; } }*/

    private List<TaskList> schedules = new List<TaskList>()
        {
            new StaticList("Today"),
            new StaticList("Tomorrow"),
            new StaticList("Next week"),
            new StaticList("Next month"),
            new StaticList("Someday"),
            new StaticList("Waiting")
        };

    public List<TaskList> Schedules { get { return schedules; } }

    public TaskList Today { get { return schedules[0]; } }
    public TaskList Tomorrow { get { return schedules[1]; } }
    public TaskList NextWeek { get { return schedules[2]; } }
    public TaskList NextMonth { get { return schedules[3]; } }
    public TaskList Someday { get { return schedules[4]; } }
    public TaskList Waiting { get { return schedules[5]; } }


    private List<TaskList> contexts = new List<TaskList>() 
        {
            new StaticList("Work"),
            new StaticList("Home"),
            new StaticList("Phone"),
            new StaticList("Computer"),
            new StaticList("Errands")
        };

    public List<TaskList> Contexts { get { return contexts; } }

    //public TaskList dueToday;
    //public TaskList dueTodayTemp;

    public GTDSystem()
    {
        /*today.AddTask(new SingleTask("task1","desc1"));

        // AllISingleTasks t = new AllISingleTasks();
        //StaticList t1 = (StaticList)t.visit(this);
        today.AddTask(new SingleTask("task1", "desc1"));
        today.AddTask(new SingleTask("task2", "desc4", DateTime.Today));
        contexts[0].AddTask(new SingleTask("task3", "desc3"));
        dueToday = new DynamicList(Today, Algorithms.getDueToday);
        foreach (GTDItem t in dueToday)
        {
            SingleTask t1 = (SingleTask)t;
            listTemp.AddTask(t1);
        }
        today.AddTask(new SingleTask("task2", "desc1"));*/
    }

	public virtual IEnumerator<GTDItem> GetEnumerator()
	{
        yield return Inbox;
        //yield return Today;
        yield return Tomorrow;
        yield return Someday;
        foreach (TaskList item in contexts)
            yield return item;
	}

    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

	public virtual T accept<T>(GTDVisitor<T> v)
	{
        return v.visit(this);
    }

    public void removeTask(Task t)
    {
        foreach (TaskList l in this)
            l.removeTask(t);
        t.Delete();
    }

    TaskList IGTDSystem.Inbox
    {
        get { throw new NotImplementedException(); }
    }

    public TaskList Tommorow
    {
        get { throw new NotImplementedException(); }
    }

    IEnumerable<TaskList> IGTDSystem.contexts
    {
        get { throw new NotImplementedException(); }
    }


    public void AddTask(Task t)
    {
        Inbox.AddTask(t);
    }

    public void AddSubList(TaskList l)
    {
        Contexts.Add(l);
    }

    public void removeSubList(TaskList l)
    {
        Contexts.Remove(l);
    }
}

