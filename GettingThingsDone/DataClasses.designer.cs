#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18010
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingThingsDone
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gtd")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertLists(Lists instance);
    partial void UpdateLists(Lists instance);
    partial void DeleteLists(Lists instance);
    partial void InsertLists_Tasks(Lists_Tasks instance);
    partial void UpdateLists_Tasks(Lists_Tasks instance);
    partial void DeleteLists_Tasks(Lists_Tasks instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertProjects_Lists(Projects_Lists instance);
    partial void UpdateProjects_Lists(Projects_Lists instance);
    partial void DeleteProjects_Lists(Projects_Lists instance);
    partial void InsertProjects_Tasks(Projects_Tasks instance);
    partial void UpdateProjects_Tasks(Projects_Tasks instance);
    partial void DeleteProjects_Tasks(Projects_Tasks instance);
    partial void InsertTasks(Tasks instance);
    partial void UpdateTasks(Tasks instance);
    partial void DeleteTasks(Tasks instance);
    partial void InsertTasks_Lists(Tasks_Lists instance);
    partial void UpdateTasks_Lists(Tasks_Lists instance);
    partial void DeleteTasks_Lists(Tasks_Lists instance);
    partial void InsertTasks_Tasks(Tasks_Tasks instance);
    partial void UpdateTasks_Tasks(Tasks_Tasks instance);
    partial void DeleteTasks_Tasks(Tasks_Tasks instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::GettingThingsDone.Properties.Settings.Default.gtdLocalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Lists> Lists
		{
			get
			{
				return this.GetTable<Lists>();
			}
		}
		
		public System.Data.Linq.Table<Lists_Tasks> Lists_Tasks
		{
			get
			{
				return this.GetTable<Lists_Tasks>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<Projects_Lists> Projects_Lists
		{
			get
			{
				return this.GetTable<Projects_Lists>();
			}
		}
		
		public System.Data.Linq.Table<Projects_Tasks> Projects_Tasks
		{
			get
			{
				return this.GetTable<Projects_Tasks>();
			}
		}
		
		public System.Data.Linq.Table<Tasks> Tasks
		{
			get
			{
				return this.GetTable<Tasks>();
			}
		}
		
		public System.Data.Linq.Table<Tasks_Lists> Tasks_Lists
		{
			get
			{
				return this.GetTable<Tasks_Lists>();
			}
		}
		
		public System.Data.Linq.Table<Tasks_Tasks> Tasks_Tasks
		{
			get
			{
				return this.GetTable<Tasks_Tasks>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lists")]
	public partial class Lists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private int _Owner;
		
		private EntitySet<Lists_Tasks> _Lists_Tasks;
		
		private EntitySet<Projects_Lists> _Projects_Lists;
		
		private EntitySet<Tasks_Lists> _Tasks_Lists;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    #endregion
		
		public Lists()
		{
			this._Lists_Tasks = new EntitySet<Lists_Tasks>(new Action<Lists_Tasks>(this.attach_Lists_Tasks), new Action<Lists_Tasks>(this.detach_Lists_Tasks));
			this._Projects_Lists = new EntitySet<Projects_Lists>(new Action<Projects_Lists>(this.attach_Projects_Lists), new Action<Projects_Lists>(this.detach_Projects_Lists));
			this._Tasks_Lists = new EntitySet<Tasks_Lists>(new Action<Tasks_Lists>(this.attach_Tasks_Lists), new Action<Tasks_Lists>(this.detach_Tasks_Lists));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Lists_Tasks", Storage="_Lists_Tasks", ThisKey="Id", OtherKey="List_id")]
		public EntitySet<Lists_Tasks> Lists_Tasks
		{
			get
			{
				return this._Lists_Tasks;
			}
			set
			{
				this._Lists_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Projects_Lists", Storage="_Projects_Lists", ThisKey="Id", OtherKey="List_id")]
		public EntitySet<Projects_Lists> Projects_Lists
		{
			get
			{
				return this._Projects_Lists;
			}
			set
			{
				this._Projects_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Tasks_Lists", Storage="_Tasks_Lists", ThisKey="Id", OtherKey="List_id")]
		public EntitySet<Tasks_Lists> Tasks_Lists
		{
			get
			{
				return this._Tasks_Lists;
			}
			set
			{
				this._Tasks_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Lists", Storage="_Users", ThisKey="Owner", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Lists.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Lists.Add(this);
						this._Owner = value.Id;
					}
					else
					{
						this._Owner = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lists_Tasks(Lists_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Lists = this;
		}
		
		private void detach_Lists_Tasks(Lists_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Lists = null;
		}
		
		private void attach_Projects_Lists(Projects_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Lists = this;
		}
		
		private void detach_Projects_Lists(Projects_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Lists = null;
		}
		
		private void attach_Tasks_Lists(Tasks_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Lists = this;
		}
		
		private void detach_Tasks_Lists(Tasks_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Lists = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lists_Tasks")]
	public partial class Lists_Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _List_id;
		
		private int _Task_id;
		
		private EntityRef<Lists> _Lists;
		
		private EntityRef<Tasks> _Tasks;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnList_idChanging(int value);
    partial void OnList_idChanged();
    partial void OnTask_idChanging(int value);
    partial void OnTask_idChanged();
    #endregion
		
		public Lists_Tasks()
		{
			this._Lists = default(EntityRef<Lists>);
			this._Tasks = default(EntityRef<Tasks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_List_id", DbType="Int NOT NULL")]
		public int List_id
		{
			get
			{
				return this._List_id;
			}
			set
			{
				if ((this._List_id != value))
				{
					if (this._Lists.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnList_idChanging(value);
					this.SendPropertyChanging();
					this._List_id = value;
					this.SendPropertyChanged("List_id");
					this.OnList_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task_id", DbType="Int NOT NULL")]
		public int Task_id
		{
			get
			{
				return this._Task_id;
			}
			set
			{
				if ((this._Task_id != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask_idChanging(value);
					this.SendPropertyChanging();
					this._Task_id = value;
					this.SendPropertyChanged("Task_id");
					this.OnTask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Lists_Tasks", Storage="_Lists", ThisKey="List_id", OtherKey="Id", IsForeignKey=true)]
		public Lists Lists
		{
			get
			{
				return this._Lists.Entity;
			}
			set
			{
				Lists previousValue = this._Lists.Entity;
				if (((previousValue != value) 
							|| (this._Lists.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lists.Entity = null;
						previousValue.Lists_Tasks.Remove(this);
					}
					this._Lists.Entity = value;
					if ((value != null))
					{
						value.Lists_Tasks.Add(this);
						this._List_id = value.Id;
					}
					else
					{
						this._List_id = default(int);
					}
					this.SendPropertyChanged("Lists");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Lists_Tasks", Storage="_Tasks", ThisKey="Task_id", OtherKey="Id", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.Lists_Tasks.Remove(this);
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.Lists_Tasks.Add(this);
						this._Task_id = value.Id;
					}
					else
					{
						this._Task_id = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private int _Owner;
		
		private EntitySet<Projects_Lists> _Projects_Lists;
		
		private EntitySet<Projects_Tasks> _Projects_Tasks;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    #endregion
		
		public Projects()
		{
			this._Projects_Lists = new EntitySet<Projects_Lists>(new Action<Projects_Lists>(this.attach_Projects_Lists), new Action<Projects_Lists>(this.detach_Projects_Lists));
			this._Projects_Tasks = new EntitySet<Projects_Tasks>(new Action<Projects_Tasks>(this.attach_Projects_Tasks), new Action<Projects_Tasks>(this.detach_Projects_Tasks));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Projects_Lists", Storage="_Projects_Lists", ThisKey="Id", OtherKey="Project_id")]
		public EntitySet<Projects_Lists> Projects_Lists
		{
			get
			{
				return this._Projects_Lists;
			}
			set
			{
				this._Projects_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Projects_Tasks", Storage="_Projects_Tasks", ThisKey="Id", OtherKey="Project_id")]
		public EntitySet<Projects_Tasks> Projects_Tasks
		{
			get
			{
				return this._Projects_Tasks;
			}
			set
			{
				this._Projects_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Projects", Storage="_Users", ThisKey="Owner", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Owner = value.Id;
					}
					else
					{
						this._Owner = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects_Lists(Projects_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Projects_Lists(Projects_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
		
		private void attach_Projects_Tasks(Projects_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Projects_Tasks(Projects_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects_Lists")]
	public partial class Projects_Lists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Project_id;
		
		private int _List_id;
		
		private EntityRef<Lists> _Lists;
		
		private EntityRef<Projects> _Projects;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProject_idChanging(int value);
    partial void OnProject_idChanged();
    partial void OnList_idChanging(int value);
    partial void OnList_idChanged();
    #endregion
		
		public Projects_Lists()
		{
			this._Lists = default(EntityRef<Lists>);
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_id", DbType="Int NOT NULL")]
		public int Project_id
		{
			get
			{
				return this._Project_id;
			}
			set
			{
				if ((this._Project_id != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_idChanging(value);
					this.SendPropertyChanging();
					this._Project_id = value;
					this.SendPropertyChanged("Project_id");
					this.OnProject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_List_id", DbType="Int NOT NULL")]
		public int List_id
		{
			get
			{
				return this._List_id;
			}
			set
			{
				if ((this._List_id != value))
				{
					if (this._Lists.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnList_idChanging(value);
					this.SendPropertyChanging();
					this._List_id = value;
					this.SendPropertyChanged("List_id");
					this.OnList_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Projects_Lists", Storage="_Lists", ThisKey="List_id", OtherKey="Id", IsForeignKey=true)]
		public Lists Lists
		{
			get
			{
				return this._Lists.Entity;
			}
			set
			{
				Lists previousValue = this._Lists.Entity;
				if (((previousValue != value) 
							|| (this._Lists.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lists.Entity = null;
						previousValue.Projects_Lists.Remove(this);
					}
					this._Lists.Entity = value;
					if ((value != null))
					{
						value.Projects_Lists.Add(this);
						this._List_id = value.Id;
					}
					else
					{
						this._List_id = default(int);
					}
					this.SendPropertyChanged("Lists");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Projects_Lists", Storage="_Projects", ThisKey="Project_id", OtherKey="Id", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Projects_Lists.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Projects_Lists.Add(this);
						this._Project_id = value.Id;
					}
					else
					{
						this._Project_id = default(int);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects_Tasks")]
	public partial class Projects_Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Project_id;
		
		private int _Task_id;
		
		private EntityRef<Projects> _Projects;
		
		private EntityRef<Tasks> _Tasks;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProject_idChanging(int value);
    partial void OnProject_idChanged();
    partial void OnTask_idChanging(int value);
    partial void OnTask_idChanged();
    #endregion
		
		public Projects_Tasks()
		{
			this._Projects = default(EntityRef<Projects>);
			this._Tasks = default(EntityRef<Tasks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_id", DbType="Int NOT NULL")]
		public int Project_id
		{
			get
			{
				return this._Project_id;
			}
			set
			{
				if ((this._Project_id != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_idChanging(value);
					this.SendPropertyChanging();
					this._Project_id = value;
					this.SendPropertyChanged("Project_id");
					this.OnProject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task_id", DbType="Int NOT NULL")]
		public int Task_id
		{
			get
			{
				return this._Task_id;
			}
			set
			{
				if ((this._Task_id != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask_idChanging(value);
					this.SendPropertyChanging();
					this._Task_id = value;
					this.SendPropertyChanged("Task_id");
					this.OnTask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Projects_Tasks", Storage="_Projects", ThisKey="Project_id", OtherKey="Id", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Projects_Tasks.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Projects_Tasks.Add(this);
						this._Project_id = value.Id;
					}
					else
					{
						this._Project_id = default(int);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Projects_Tasks", Storage="_Tasks", ThisKey="Task_id", OtherKey="Id", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.Projects_Tasks.Remove(this);
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.Projects_Tasks.Add(this);
						this._Task_id = value.Id;
					}
					else
					{
						this._Task_id = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<System.DateTimeOffset> _DueDate;
		
		private System.DateTimeOffset _CreationDate;
		
		private int _Owner;
		
		private EntitySet<Lists_Tasks> _Lists_Tasks;
		
		private EntitySet<Projects_Tasks> _Projects_Tasks;
		
		private EntitySet<Tasks_Lists> _Tasks_Lists;
		
		private EntitySet<Tasks_Tasks> _Tasks_Tasks;
		
		private EntitySet<Tasks_Tasks> _Tasks_Tasks1;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnDueDateChanged();
    partial void OnCreationDateChanging(System.DateTimeOffset value);
    partial void OnCreationDateChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    #endregion
		
		public Tasks()
		{
			this._Lists_Tasks = new EntitySet<Lists_Tasks>(new Action<Lists_Tasks>(this.attach_Lists_Tasks), new Action<Lists_Tasks>(this.detach_Lists_Tasks));
			this._Projects_Tasks = new EntitySet<Projects_Tasks>(new Action<Projects_Tasks>(this.attach_Projects_Tasks), new Action<Projects_Tasks>(this.detach_Projects_Tasks));
			this._Tasks_Lists = new EntitySet<Tasks_Lists>(new Action<Tasks_Lists>(this.attach_Tasks_Lists), new Action<Tasks_Lists>(this.detach_Tasks_Lists));
			this._Tasks_Tasks = new EntitySet<Tasks_Tasks>(new Action<Tasks_Tasks>(this.attach_Tasks_Tasks), new Action<Tasks_Tasks>(this.detach_Tasks_Tasks));
			this._Tasks_Tasks1 = new EntitySet<Tasks_Tasks>(new Action<Tasks_Tasks>(this.attach_Tasks_Tasks1), new Action<Tasks_Tasks>(this.detach_Tasks_Tasks1));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Lists_Tasks", Storage="_Lists_Tasks", ThisKey="Id", OtherKey="Task_id")]
		public EntitySet<Lists_Tasks> Lists_Tasks
		{
			get
			{
				return this._Lists_Tasks;
			}
			set
			{
				this._Lists_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Projects_Tasks", Storage="_Projects_Tasks", ThisKey="Id", OtherKey="Task_id")]
		public EntitySet<Projects_Tasks> Projects_Tasks
		{
			get
			{
				return this._Projects_Tasks;
			}
			set
			{
				this._Projects_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Lists", Storage="_Tasks_Lists", ThisKey="Id", OtherKey="Task_id")]
		public EntitySet<Tasks_Lists> Tasks_Lists
		{
			get
			{
				return this._Tasks_Lists;
			}
			set
			{
				this._Tasks_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Tasks", Storage="_Tasks_Tasks", ThisKey="Id", OtherKey="Predecessor")]
		public EntitySet<Tasks_Tasks> Tasks_Tasks
		{
			get
			{
				return this._Tasks_Tasks;
			}
			set
			{
				this._Tasks_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Tasks1", Storage="_Tasks_Tasks1", ThisKey="Id", OtherKey="Successor")]
		public EntitySet<Tasks_Tasks> Tasks_Tasks1
		{
			get
			{
				return this._Tasks_Tasks1;
			}
			set
			{
				this._Tasks_Tasks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Tasks", Storage="_Users", ThisKey="Owner", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Owner = value.Id;
					}
					else
					{
						this._Owner = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lists_Tasks(Lists_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = this;
		}
		
		private void detach_Lists_Tasks(Lists_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = null;
		}
		
		private void attach_Projects_Tasks(Projects_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = this;
		}
		
		private void detach_Projects_Tasks(Projects_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = null;
		}
		
		private void attach_Tasks_Lists(Tasks_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = this;
		}
		
		private void detach_Tasks_Lists(Tasks_Lists entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = null;
		}
		
		private void attach_Tasks_Tasks(Tasks_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = this;
		}
		
		private void detach_Tasks_Tasks(Tasks_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks = null;
		}
		
		private void attach_Tasks_Tasks1(Tasks_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks1 = this;
		}
		
		private void detach_Tasks_Tasks1(Tasks_Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Tasks1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks_Lists")]
	public partial class Tasks_Lists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Task_id;
		
		private int _List_id;
		
		private EntityRef<Lists> _Lists;
		
		private EntityRef<Tasks> _Tasks;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTask_idChanging(int value);
    partial void OnTask_idChanged();
    partial void OnList_idChanging(int value);
    partial void OnList_idChanged();
    #endregion
		
		public Tasks_Lists()
		{
			this._Lists = default(EntityRef<Lists>);
			this._Tasks = default(EntityRef<Tasks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task_id", DbType="Int NOT NULL")]
		public int Task_id
		{
			get
			{
				return this._Task_id;
			}
			set
			{
				if ((this._Task_id != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTask_idChanging(value);
					this.SendPropertyChanging();
					this._Task_id = value;
					this.SendPropertyChanged("Task_id");
					this.OnTask_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_List_id", DbType="Int NOT NULL")]
		public int List_id
		{
			get
			{
				return this._List_id;
			}
			set
			{
				if ((this._List_id != value))
				{
					if (this._Lists.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnList_idChanging(value);
					this.SendPropertyChanging();
					this._List_id = value;
					this.SendPropertyChanged("List_id");
					this.OnList_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lists_Tasks_Lists", Storage="_Lists", ThisKey="List_id", OtherKey="Id", IsForeignKey=true)]
		public Lists Lists
		{
			get
			{
				return this._Lists.Entity;
			}
			set
			{
				Lists previousValue = this._Lists.Entity;
				if (((previousValue != value) 
							|| (this._Lists.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lists.Entity = null;
						previousValue.Tasks_Lists.Remove(this);
					}
					this._Lists.Entity = value;
					if ((value != null))
					{
						value.Tasks_Lists.Add(this);
						this._List_id = value.Id;
					}
					else
					{
						this._List_id = default(int);
					}
					this.SendPropertyChanged("Lists");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Lists", Storage="_Tasks", ThisKey="Task_id", OtherKey="Id", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.Tasks_Lists.Remove(this);
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.Tasks_Lists.Add(this);
						this._Task_id = value.Id;
					}
					else
					{
						this._Task_id = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks_Tasks")]
	public partial class Tasks_Tasks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Predecessor;
		
		private int _Successor;
		
		private EntityRef<Tasks> _Tasks;
		
		private EntityRef<Tasks> _Tasks1;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPredecessorChanging(int value);
    partial void OnPredecessorChanged();
    partial void OnSuccessorChanging(int value);
    partial void OnSuccessorChanged();
    #endregion
		
		public Tasks_Tasks()
		{
			this._Tasks = default(EntityRef<Tasks>);
			this._Tasks1 = default(EntityRef<Tasks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Predecessor", DbType="Int NOT NULL")]
		public int Predecessor
		{
			get
			{
				return this._Predecessor;
			}
			set
			{
				if ((this._Predecessor != value))
				{
					if (this._Tasks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPredecessorChanging(value);
					this.SendPropertyChanging();
					this._Predecessor = value;
					this.SendPropertyChanged("Predecessor");
					this.OnPredecessorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Successor", DbType="Int NOT NULL")]
		public int Successor
		{
			get
			{
				return this._Successor;
			}
			set
			{
				if ((this._Successor != value))
				{
					if (this._Tasks1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessorChanging(value);
					this.SendPropertyChanging();
					this._Successor = value;
					this.SendPropertyChanged("Successor");
					this.OnSuccessorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Tasks", Storage="_Tasks", ThisKey="Predecessor", OtherKey="Id", IsForeignKey=true)]
		public Tasks Tasks
		{
			get
			{
				return this._Tasks.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks.Entity;
				if (((previousValue != value) 
							|| (this._Tasks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks.Entity = null;
						previousValue.Tasks_Tasks.Remove(this);
					}
					this._Tasks.Entity = value;
					if ((value != null))
					{
						value.Tasks_Tasks.Add(this);
						this._Predecessor = value.Id;
					}
					else
					{
						this._Predecessor = default(int);
					}
					this.SendPropertyChanged("Tasks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tasks_Tasks_Tasks1", Storage="_Tasks1", ThisKey="Successor", OtherKey="Id", IsForeignKey=true)]
		public Tasks Tasks1
		{
			get
			{
				return this._Tasks1.Entity;
			}
			set
			{
				Tasks previousValue = this._Tasks1.Entity;
				if (((previousValue != value) 
							|| (this._Tasks1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tasks1.Entity = null;
						previousValue.Tasks_Tasks1.Remove(this);
					}
					this._Tasks1.Entity = value;
					if ((value != null))
					{
						value.Tasks_Tasks1.Add(this);
						this._Successor = value.Id;
					}
					else
					{
						this._Successor = default(int);
					}
					this.SendPropertyChanged("Tasks1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private string _Mail;
		
		private EntitySet<Lists> _Lists;
		
		private EntitySet<Projects> _Projects;
		
		private EntitySet<Tasks> _Tasks;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    #endregion
		
		public Users()
		{
			this._Lists = new EntitySet<Lists>(new Action<Lists>(this.attach_Lists), new Action<Lists>(this.detach_Lists));
			this._Projects = new EntitySet<Projects>(new Action<Projects>(this.attach_Projects), new Action<Projects>(this.detach_Projects));
			this._Tasks = new EntitySet<Tasks>(new Action<Tasks>(this.attach_Tasks), new Action<Tasks>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Lists", Storage="_Lists", ThisKey="Id", OtherKey="Owner")]
		public EntitySet<Lists> Lists
		{
			get
			{
				return this._Lists;
			}
			set
			{
				this._Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Projects", Storage="_Projects", ThisKey="Id", OtherKey="Owner")]
		public EntitySet<Projects> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Tasks", Storage="_Tasks", ThisKey="Id", OtherKey="Owner")]
		public EntitySet<Tasks> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lists(Lists entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Lists(Lists entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Tasks(Tasks entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
